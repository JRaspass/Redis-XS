#!/usr/bin/env perl

use v5.38;
use experimental qw( for_list );

use JSON::PP;
use List::Util qw( max );

my sub slurp($file)           { local ( @ARGV, $/ ) = $file; <> }
my sub spurt($file, $content) { open my $fh, '>', $file; print $fh $content }

# Skip commands that have bespoke methods.
my %skip = map { $_ => 1 } qw( client|info client|list info );

# Some commands have been removed/renamed, manually list them here.
my %cmds = (
    json   => [
        # Removed in https://github.com/RedisJSON/RedisJSON/pull/369.
        { command => 'json.numpowby', removed => 1 },
    ],
    string => [
        { command => 'stralgo|lcs', removed => 1 },
    ],
);

for (<modules/{redis/src/commands/*.json,RedisJSON/commands.json}>) {
    my $json = decode_json slurp $_;

    while ( my ( $cmd, $info ) = each %$json ) {
        push $cmds{ $info->{group} }->@*, {
            $info->%{ qw( arguments arity summary since ) },
            command => lc( join '|', $info->{container} // (), $cmd =~ y/ /|/r ),
        };
    }
}

# We don't support sentinel commands.
delete $cmds{sentinel};

# Sort by command.
@$_ = sort { $a->{command} cmp $b->{command} } @$_ for values %cmds;

# Update C header.
open my $fh, '>', 'commands.h';

print $fh <<~'C';
    typedef struct {
        const char* const name;
        int               argc;
        const char* const argv[2];
    } redisCommandData;

    static const redisCommandData commands[] = {

        {},
    C

for my ( $group, $cmds ) ( %cmds{ sort keys %cmds } ) {
    say $fh "\n    // $group";

    my $max = max map length $_->{command}, @$cmds;
    for ( map $_->{command}, @$cmds ) {
        my @args = split /\|/;

        printf $fh qq/%s{"Redis::XS::%s", %s%d, {"%s"}},\n/,
            $skip{$_} ? ' // ' : '    ', s/\W/_/gr, ' ' x ($max - length),
            scalar @args, join '", "', @args;
    }
}

say $fh "\n    {},\n};";

close $fh;

# Update POD.
my $pod;
for my ( $group, $cmds ) ( %cmds{ sort keys %cmds } ) {
    $pod .= "=head2 $group\n\n";

    for (@$cmds) {
        next if $_->{removed} || $_->{summary} =~ /^A container for /;

        my $name = $_->{command} =~ y/|/ /r;
        my $url  = 'https://redis.io/commands/' . $name =~ y/ /-/r . '/';
        my $args = sub {
            return '' if ( $_->{arity} // 0 ) == split / /, $name;

            my @args;
            for ( @{ $_->{arguments} // [] } ) {
                # Skip commands with nested and optional args for now.
                if ( $_->{arguments} || $_->{optional} ) {
                    @args = ();
                    last;
                }

                # lc because of xack/xdel.
                my $name = lc $_->{name} =~ s/\W/_/gr;
                push @args, $_->{multiple} ? "\@${name}s" : "\$$name";
            }

            @args ? do { local $" = ', '; "(@args)" } : '(...)';
        }->();

        $pod .= <<~"POD"
            =head3 $name

              \$r->@{[ $name =~ s/\W/_/gr ]}$args;

            $_->{summary}

            Since $_->{since}. See L<$url>.

            POD
    }
}

my $doc = slurp 'lib/Redis/XS.pod';
$doc =~ s/ (?<= ^ =head1\ COMMANDS \n\n ) .+ (?= ^ =head1 ) /$pod/mnsx;
spurt 'lib/Redis/XS.pod', $doc;
